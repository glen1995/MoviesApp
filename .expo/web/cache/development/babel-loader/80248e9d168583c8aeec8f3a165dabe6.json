{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BASE_URL, APP_KEY } from \"../config/api_config\";\nimport { useEffect, useState } from \"react\";\n\nvar apiRequest = function apiRequest(type, queryString) {\n  var myAbortController = new AbortController();\n  var url = \"\";\n  var searchType;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  switch (type) {\n    case \"movie\":\n      searchType = \"movie\";\n      url = \"\" + BASE_URL + searchType + \"/\" + queryString + \"?api_key=\" + APP_KEY + \"&language=en-US&page=1\";\n      break;\n\n    case \"tv\":\n      searchType = \"tv\";\n      url = \"\" + BASE_URL + searchType + \"/\" + queryString + \"?api_key=\" + APP_KEY + \"&language=en-US&page=1\";\n      break;\n\n    default:\n      throw new Error(\"You must pass type\");\n  }\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var res, json;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url, {\n                signal: myAbortController.signal\n              }));\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 7:\n              json = _context.sent;\n              setResponse(json);\n              setIsLoading(false);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              setError(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 12]], Promise);\n    };\n\n    fetchData();\n    return function () {\n      myAbortController.abort();\n    };\n  }, [url]);\n  return {\n    response: response,\n    error: error,\n    isLoading: isLoading,\n    url: url\n  };\n};\n\nexport default apiRequest;","map":{"version":3,"sources":["/home/glenja/Desktop/expo/MoviesApp/components/service/api.js"],"names":["BASE_URL","APP_KEY","useEffect","useState","apiRequest","type","queryString","myAbortController","AbortController","url","searchType","response","setResponse","error","setError","isLoading","setIsLoading","Error","fetchData","fetch","signal","res","json","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,OAAnB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,WAAP,EAAuB;AACxC,MAAMC,iBAAiB,GAAG,IAAIC,eAAJ,EAA1B;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,UAAJ;;AACA,kBAAgCP,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOQ,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA0BT,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAkCX,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,UAAQX,IAAR;AACE,SAAK,OAAL;AACEK,MAAAA,UAAU,GAAG,OAAb;AACAD,MAAAA,GAAG,QAAMT,QAAN,GAAiBU,UAAjB,SAA+BJ,WAA/B,iBAAsDL,OAAtD,2BAAH;AACA;;AACF,SAAK,IAAL;AACES,MAAAA,UAAU,GAAG,IAAb;AACAD,MAAAA,GAAG,QAAMT,QAAN,GAAiBU,UAAjB,SAA+BJ,WAA/B,iBAAsDL,OAAtD,2BAAH;AACA;;AACF;AACE,YAAM,IAAIgB,KAAJ,CAAU,oBAAV,CAAN;AAVJ;;AAeAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBF,cAAAA,YAAY,CAAC,IAAD,CAAZ;AADgB;AAAA;AAAA,+CAIIG,KAAK,CAACV,GAAD,EAAM;AAAEW,gBAAAA,MAAM,EAAEb,iBAAiB,CAACa;AAA5B,eAAN,CAJT;;AAAA;AAIRC,cAAAA,GAJQ;AAAA;AAAA,+CAKKA,GAAG,CAACC,IAAJ,EALL;;AAAA;AAKRA,cAAAA,IALQ;AAOdV,cAAAA,WAAW,CAACU,IAAD,CAAX;AACAN,cAAAA,YAAY,CAAC,KAAD,CAAZ;AARc;AAAA;;AAAA;AAAA;AAAA;AAUdF,cAAAA,QAAQ,aAAR;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAcAI,IAAAA,SAAS;AAET,WAAO,YAAM;AACXX,MAAAA,iBAAiB,CAACgB,KAAlB;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACd,GAAD,CApBM,CAAT;AAsBA,SAAO;AAAEE,IAAAA,QAAQ,EAARA,QAAF;AAAYE,IAAAA,KAAK,EAALA,KAAZ;AAAmBE,IAAAA,SAAS,EAATA,SAAnB;AAA8BN,IAAAA,GAAG,EAAHA;AAA9B,GAAP;AACD,CA9CD;;AAgDA,eAAeL,UAAf","sourcesContent":["import { BASE_URL, APP_KEY } from \"../config/api_config\";\nimport { useEffect, useState } from \"react\";\nconst apiRequest = (type, queryString) => {\n  const myAbortController = new AbortController();\n  let url = \"\";\n  let searchType;\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  switch (type) {\n    case \"movie\":\n      searchType = \"movie\";\n      url = `${BASE_URL}${searchType}/${queryString}?api_key=${APP_KEY}&language=en-US&page=1`;\n      break;\n    case \"tv\":\n      searchType = \"tv\";\n      url = `${BASE_URL}${searchType}/${queryString}?api_key=${APP_KEY}&language=en-US&page=1`;\n      break;\n    default:\n      throw new Error(\"You must pass type\");\n  }\n\n  \n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(url, { signal: myAbortController.signal });\n        const json = await res.json();\n\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      myAbortController.abort()\n    };\n  }, [url]);\n\n  return { response, error, isLoading, url };\n};\n\nexport default apiRequest;\n"]},"metadata":{},"sourceType":"module"}